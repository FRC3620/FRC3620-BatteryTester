plugins {
    id 'java'
    id 'org.hidetake.ssh' version '2.11.2'
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

//group 'org.usfirst.frc3620.battery-tester'
//version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    log4jVersion = '2.20.0'
}

sourceSets.main.java.srcDirs += ["diozero/diozero-core/src/main/java"]
sourceSets.main.resources.srcDirs += ["diozero/diozero-core/src/main/resources"]

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation 'io.undertow:undertow-websockets-jsr:2.3.5.Final'

    implementation 'org.slf4j:slf4j-api:2.0.7'

    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion"

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'

    //implementation ('com.diozero:diozero-core:1.3.5') {
    //    exclude group: 'org.tinylog', module: 'tinylog-impl'
    //}

    implementation ('com.google.zxing:javase:3.5.1') {
        exclude group: 'com.beust', module: 'jcommander'
    }

    implementation 'com.github.sarxos:webcam-capture:0.3.12'

    implementation 'org.tinylog:tinylog-jboss:2.5.0'

    implementation 'info.picocli:picocli:4.7.3'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.3'

}

test {
    useJUnitPlatform()
    filter {
        // https://stackoverflow.com/a/52879530/17887564
        setFailOnNoMatchingTests(false)

        includeTestsMatching 'BitTest'
    }
}

jar {
    manifest {
        attributes "Main-Class": "org.usfirst.frc3620.batterytester.Application"
        // attributes "Main-Class": "org.usfirst.frc3620.batterytester.SN3218"
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

remotes {
    tester {
        host = 'battery-tester.local'
        user = 'pi'
        knownHosts = allowAnyHosts
        identity = file('ssh/private')
    }
}

task deploy {
    doLast {
        ssh.run {
            session(remotes.tester) {
                put from: "$buildDir/libs/FRC3620-BatteryTester.jar", into: './'
                execute 'ls'
            }
        }
    }
}

deploy.dependsOn(build)

configure(deploy) {
    group = 'build'
    description = 'Deploy jar to remote system'
}

// git wonderfulness
task printGitProperties {
    dependsOn generateGitProperties
    doLast {
        println "Project: " + project.ext.gitProps["project.dir"]
        println "Branch: " + project.ext.gitProps["git.branch"]
        println "Describe: " + project.ext.gitProps["git.commit.id.describe"]
        println "Dirty: "  + project.ext.gitProps["git.dirty"]
        println "Build time: " + project.ext.gitProps["build.time"]
        println "Build host: " + project.ext.gitProps["git.build.host"]
    }
}

def getBuildTime() {
    return new Date().toString();
}

gitProperties {
    // Customize directory using gitPropertiesResourceDir config
    // The directory in this config key is also added as a classpath entry
    // (so the git.properties file will be included in the final JAR file)
    customProperty "build.time", { getBuildTime() }
    customProperty "project.dir", { project.projectDir.getName() }
    customProperty 'git.commit.id.describe', { it.describe(tags: true, always: true) }
    gitPropertiesResourceDir = file("${project.rootDir}/gitversion")
    extProperty = 'gitProps'
}
generateGitProperties.finalizedBy printGitProperties // make sure we do things in the correct order
//generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)

tasks.processResources.dependsOn generateGitProperties // make sure we do things in the correct order
// https://stackoverflow.com/a/70648216/17887564
//tasks.processResources.outputs.upToDateWhen { false }  // make sure the processResources task always runs

// ****************************************************************************

task printSourceSetInformation(){

    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each {
                print "  "+it.path+"\n"
            }
            println ""
        }
    }
}